/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ResourcesImport } from './routes/resources'
import { Route as PathwaysImport } from './routes/pathways'
import { Route as JourneyImport } from './routes/journey'
import { Route as DashImport } from './routes/dash'
import { Route as CodecourseImport } from './routes/codecourse'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const ResourcesRoute = ResourcesImport.update({
  id: '/resources',
  path: '/resources',
  getParentRoute: () => rootRoute,
} as any)

const PathwaysRoute = PathwaysImport.update({
  id: '/pathways',
  path: '/pathways',
  getParentRoute: () => rootRoute,
} as any)

const JourneyRoute = JourneyImport.update({
  id: '/journey',
  path: '/journey',
  getParentRoute: () => rootRoute,
} as any)

const DashRoute = DashImport.update({
  id: '/dash',
  path: '/dash',
  getParentRoute: () => rootRoute,
} as any)

const CodecourseRoute = CodecourseImport.update({
  id: '/codecourse',
  path: '/codecourse',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/codecourse': {
      id: '/codecourse'
      path: '/codecourse'
      fullPath: '/codecourse'
      preLoaderRoute: typeof CodecourseImport
      parentRoute: typeof rootRoute
    }
    '/dash': {
      id: '/dash'
      path: '/dash'
      fullPath: '/dash'
      preLoaderRoute: typeof DashImport
      parentRoute: typeof rootRoute
    }
    '/journey': {
      id: '/journey'
      path: '/journey'
      fullPath: '/journey'
      preLoaderRoute: typeof JourneyImport
      parentRoute: typeof rootRoute
    }
    '/pathways': {
      id: '/pathways'
      path: '/pathways'
      fullPath: '/pathways'
      preLoaderRoute: typeof PathwaysImport
      parentRoute: typeof rootRoute
    }
    '/resources': {
      id: '/resources'
      path: '/resources'
      fullPath: '/resources'
      preLoaderRoute: typeof ResourcesImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/codecourse': typeof CodecourseRoute
  '/dash': typeof DashRoute
  '/journey': typeof JourneyRoute
  '/pathways': typeof PathwaysRoute
  '/resources': typeof ResourcesRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/codecourse': typeof CodecourseRoute
  '/dash': typeof DashRoute
  '/journey': typeof JourneyRoute
  '/pathways': typeof PathwaysRoute
  '/resources': typeof ResourcesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/codecourse': typeof CodecourseRoute
  '/dash': typeof DashRoute
  '/journey': typeof JourneyRoute
  '/pathways': typeof PathwaysRoute
  '/resources': typeof ResourcesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/codecourse'
    | '/dash'
    | '/journey'
    | '/pathways'
    | '/resources'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/codecourse'
    | '/dash'
    | '/journey'
    | '/pathways'
    | '/resources'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/codecourse'
    | '/dash'
    | '/journey'
    | '/pathways'
    | '/resources'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  CodecourseRoute: typeof CodecourseRoute
  DashRoute: typeof DashRoute
  JourneyRoute: typeof JourneyRoute
  PathwaysRoute: typeof PathwaysRoute
  ResourcesRoute: typeof ResourcesRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  CodecourseRoute: CodecourseRoute,
  DashRoute: DashRoute,
  JourneyRoute: JourneyRoute,
  PathwaysRoute: PathwaysRoute,
  ResourcesRoute: ResourcesRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/codecourse",
        "/dash",
        "/journey",
        "/pathways",
        "/resources"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/codecourse": {
      "filePath": "codecourse.tsx"
    },
    "/dash": {
      "filePath": "dash.tsx"
    },
    "/journey": {
      "filePath": "journey.tsx"
    },
    "/pathways": {
      "filePath": "pathways.tsx"
    },
    "/resources": {
      "filePath": "resources.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
